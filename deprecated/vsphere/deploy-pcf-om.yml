# To set your Concourse pipeline:
# fly -t <your-concourse> set-pipeline \
#  --config deploy-pcf.yml \
#  --pipeline deploy-pcf \
#  --var "opsmgr-version=1.6" \
#  --var "ert-version=1.6" \
#  --var "environment-name=<your-env-name>" \
#  --var "pivnet-token=<your-pivnet-token>" \
#  --var "github-key=$(cat <path-to-github-key>)"
---
opsmgr_version: &opsmgr_version {{opsmgr-version}}
opsmgr_version_filter: &opsmgr_version_filter {{opsmgr-version-filter}}
ert_version_filter: &ert_version_filter {{ert-version-filter}}
environment_name: &env_name {{environment-name}}
env_app_url: &env_app_url environments.toolsmiths.cf-app.com
pivnet_token: &pivnet_token {{pivnet-token}}
worker_tag: &worker_tag [{{worker-tag}}]
github_key: &github_key {{github-key}}
default_opsman_username: &default_opsman_username {{default_opsman_username}}
default_opsman_password: &default_opsman_password {{default_opsman_password}}
haproxy_ip: &haproxy_ip {{haproxy_ip}}
vcenter_url: &vcenter_url {{vcenter_url}}
vcenter_username: &vcenter_username {{vcenter_username}}
vcenter_password: &vcenter_password {{vcenter_password}}
vcenter_datacenter: &vcenter_datacenter {{vcenter_datacenter}}
vcenter_cluster: &vcenter_cluster {{vcenter_cluster}}
vcenter_datastore: &vcenter_datastore {{vcenter_datastore}}
opsman_ip: &opsman_ip {{opsman_ip}}
netmask: &netmask {{netmask}}
gateway: &gateway {{gateway}}
cidr: &cidr {{cidr}}
reserved_ip_ranges: &reserved_ip_ranges {{reserved_ip_ranges}}
dns: &dns {{dns}}
ntp: &ntp {{ntp}}
ubuntu_password: &ubuntu_password {{ubuntu_password}}

#The following parameters are used to generate and email success and failure messages.
pipeline_url: &pipeline_url {{pipeline-url}}
ops_manager_url: &ops_manager_url {{ops-manager-url}}
contact_email: &contact_email {{contact-email}}
smtp_server: &smtp_server {{smtp-server}}
smtp_port: &smtp_port "25" # this must be a string
smtp_username: &smtp_username {{smtp-username}}
smtp_password: &smtp_password {{smtp-password}}
from_email: &from_email {{from-email}}

email_user_on_failure: &email-on-failure
  do:
  - task: generate email-file
    config:
      platform: linux
      image: docker:///blang/alpine-bash
      params:
        ENV_NAME: *env_name
        PIPELINE_URL: *pipeline_url
        CONTACT_EMAIL: *contact_email
      run:
        path: /bin/bash
        args:
        - '-c'
        - |
          echo -e "Failed to deploy PCF on $ENV_NAME" > $PWD/pipeline-output/subject-file
          echo -e "Hello $CONTACT_EMAIL,\n\nYour PCF deployment on $ENV_NAME failed. We will take a look at it as soon as possible. In the meantime, you can take a look at the pipeline to get an idea why it failed: $PIPELINE_URL.\n\nThanks,\n\nCF Toolsmiths Team" > $PWD/pipeline-output/body-file
      outputs:
      - name: pipeline-output
  - put: send-an-email
    params:
      subject: pipeline-output/subject-file
      body: pipeline-output/body-file

resource_types:
  - name: email
    type: docker-image
    source:
      repository: pcfseceng/email-resource

  - name: pivnet
    type: docker-image
    source:
      repository: pivotalcf/pivnet-resource
      tag: latest-final

resources:
  - name: toolsmiths-shared-scripts
    type: git
    source:
      uri: https://github.com/pivotal-cf/toolsmiths-shared-scripts
      branch: master

  - name: send-an-email
    type: email
    source:
      smtp:
        host: *smtp_server
        port: *smtp_port
        username: *smtp_username
        password: *smtp_password
      from: *from_email
      to: [ *contact_email, 'cf-toolsmiths@pivotal.io' ]

  - name: pivnet-opsmgr
    type: pivnet
    source:
      api_token: *pivnet_token
      product_slug: ops-manager
      product_version: *opsmgr_version_filter
      sort_by: semver

  - name: pivnet-ert
    type: pivnet
    source:
      api_token: *pivnet_token
      product_slug: elastic-runtime
      product_version: *ert_version_filter
      sort_by: semver

groups:
- name: deploy-pcf-vsphere
  jobs:
  - upload-om-pcf-vsphere
  - configure-ops-manager
  - upload-elastic-runtime-pcf-vsphere
  - configure-elastic-runtime
  - trigger-install

jobs:
  - name: upload-om-pcf-vsphere
    serial: true
    plan:
    - aggregate:
      - get: toolsmiths-shared-scripts
        tags: *worker_tag
      - get: pivnet-opsmgr
        tags: *worker_tag
        attempts: 3
        params:
          globs:
          - '*vsphere*'
    - do:
      - task: deploy-ops-manager
        tags: *worker_tag
        privileged: true
        config:
          platform: linux
          image: docker:///cftoolsmiths/deploy-pcf-vsphere-1.9
          inputs:
          - name: toolsmiths-shared-scripts
          - name: pivnet-opsmgr
          run:
            path: /bin/bash
            args:
            - '-c'
            - |
              export GOVC_RESOURCE_POOL=/${GOVC_DATACENTER}/host/${GOVC_CLUSTER}/Resources/${ENV_NAME}
              export CURR_DIR=$(pwd)
              export OPSMAN_NAME=OpsMan-${OPSMGR_VERSION}

              cd toolsmiths-shared-scripts/deploy_pcf
              erb opsman_settings.json.erb > opsman_settings.json

              govc ls /${GOVC_DATACENTER}/vm/${ENV_NAME}/* | xargs -I{} govc vm.destroy "{}"
              govc ls /${GOVC_DATACENTER}/vm/${ENV_NAME}_templates/* | xargs -I{} govc vm.destroy "{}"
              govc ls /${GOVC_DATACENTER}/vm/${ENV_NAME}_vms/* | xargs -I{} govc vm.destroy "{}"

              govc import.ova --options=opsman_settings.json --name=${OPSMAN_NAME} -k=true --folder=/${GOVC_DATACENTER}/vm/${ENV_NAME} ${CURR_DIR}/pivnet-opsmgr/*.ova

              govc vm.change -c=2 -m=8192 -vm /${GOVC_DATACENTER}/vm/${ENV_NAME}/${OPSMAN_NAME}
              govc vm.power -on=true /${GOVC_DATACENTER}/vm/${ENV_NAME}/${OPSMAN_NAME}
        params:
          ENV_NAME: *env_name
          OPSMGR_VERSION: *opsmgr_version
          GOVC_URL: *vcenter_url
          GOVC_INSECURE: 1
          GOVC_USERNAME: *vcenter_username
          GOVC_PASSWORD: *vcenter_password
          GOVC_DATACENTER: *vcenter_datacenter
          GOVC_CLUSTER: *vcenter_cluster
          GOVC_DATASTORE: *vcenter_datastore
          OPSMAN_IP: *opsman_ip
          NETMASK: *netmask
          GATEWAY: *gateway
          DNS: *dns
          NTP: *ntp
          UBUNTU_PASSWORD: *ubuntu_password
      on_failure: *email-on-failure

  - name: configure-ops-manager
    serial: true
    plan:
    - aggregate:
      - get: toolsmiths-shared-scripts
        tags: *worker_tag
        passed: [upload-om-pcf-vsphere]
        trigger: true
    - do:
      - task: config-opsman-auth-using-om
        tags: *worker_tag
        privileged: true
        config:
          platform: linux
          image: docker:///cftoolsmiths/deploy-pcf-vsphere-1.9
          run:
            path: /bin/bash
            args:
              - '-c'
              - |
                  set -e
                  echo "=============================================================================================="
                  echo "Configuring OpsManager @ https://pcf.${ENV_NAME}.cf-app.com ..."
                  echo "=============================================================================================="
                  tries=1
                  until [ $tries -ge 4 ]
                  do
                      echo "=============================================================================================="
                      echo "Attempt Number ${tries}: Configuring Ops Manager authentication ..."
                      echo "=============================================================================================="
                      om-linux --target https://pcf.$ENV_NAME.cf-app.com -k \
                          configure-authentication \
                          --username "$DEFAULT_OPSMAN_USERNAME" \
                          --password "$DEFAULT_OPSMAN_PASSWORD" \
                          --decryption-passphrase "$DEFAULT_OPSMAN_PASSWORD"\
                      && break
                      tries=$[$tries+1]
                      sleep 60
                  done

        params:
          ENV_NAME: *env_name
          DEFAULT_OPSMAN_USERNAME: *default_opsman_username
          DEFAULT_OPSMAN_PASSWORD: *default_opsman_password
      - task: configure-bosh-director
        tags: *worker_tag
        privileged: true
        config:
          platform: linux
          image: docker:///cftoolsmiths/deploy-pcf-vsphere-1.9
          inputs:
          - name: toolsmiths-shared-scripts
          run:
            path: /bin/bash
            args:
            - '-c'
            - |
                set -ex
                echo "=============================================================================================="
                echo "Configuring Bosh Director @ https://pcf.${ENV_NAME}.cf-app.com ..."
                echo "=============================================================================================="
                erb networks.json.erb > networks.json
                erb iaas.json.erb > iaas.json
                echo "Configuring the IAAS ..."
                om-linux --target https://pcf.$ENV_NAME.cf-app.com -k --username "$DEFAULT_OPSMAN_USERNAME" \
                         --password "$DEFAULT_OPSMAN_PASSWORD" \
                         configure-bosh \
                         --iaas-configuration "$(cat iaas.json)"
                echo "Configuring the Director ..."
                om-linux --target https://pcf.$ENV_NAME.cf-app.com -k --username "$DEFAULT_OPSMAN_USERNAME" \
                         --password "$DEFAULT_OPSMAN_PASSWORD" \
                         configure-bosh \
                         --director-configuration "{\"ntp_servers_string\": \"ntp.svc.pivotal.io\"}"
                echo "Configuring the Networks ..."
                om-linux --target https://pcf.$ENV_NAME.cf-app.com -k --username "$DEFAULT_OPSMAN_USERNAME" \
                         --password "$DEFAULT_OPSMAN_PASSWORD" \
                         configure-bosh \
                         --az-configuration "{\"availability_zones\":[{\"name\":\"default\", \"cluster\":\"$VC_CLUSTER\", \"resource_pool\":\"$ENV_NAME\"}]}" \
                         --networks-configuration "$(cat networks.json)" \
                         --network-assignment '{"singleton_availability_zone":"default","network":"default"}'
            dir: toolsmiths-shared-scripts/deploy_pcf
        params:
          VC_URL: *vcenter_url
          VC_USERNAME: *vcenter_username
          VC_PASSWORD: *vcenter_password
          VC_DATACENTER: *vcenter_datacenter
          VC_CLUSTER: *vcenter_cluster
          VC_DATASTORE: *vcenter_datastore
          DEFAULT_OPSMAN_USERNAME: *default_opsman_username
          DEFAULT_OPSMAN_PASSWORD: *default_opsman_password
          ENV_NAME: *env_name
          OPSMGR_VERSION: *opsmgr_version
          PIVNET_TOKEN: *pivnet_token
          GATEWAY: *gateway
          DNS: *dns
          CIDR: *cidr
          RESERVED_IP_RANGES: *reserved_ip_ranges
      on_failure: *email-on-failure

  - name: upload-elastic-runtime-pcf-vsphere
    serial: true
    plan:
    - aggregate:
      - get: toolsmiths-shared-scripts
        tags: *worker_tag
        passed: [configure-ops-manager]
        trigger: true
      - get: pivnet-ert
        tags: *worker_tag
        attempts: 3
        params:
          globs:
          - '*pivotal'
    - do:
      - task: upload-elastic-runtime-using-om
        tags: *worker_tag
        privileged: true
        config:
          platform: linux
          image: docker:///cftoolsmiths/deploy-pcf-vsphere-1.9
          inputs:
          - name: pivnet-ert
          run:
            path: /bin/bash
            args:
              - '-c'
              - |
                  set -e
                  echo "=============================================================================================="
                  echo " Uploading ERT tile to @ https://pcf.$ENV_NAME.cf-app.com ..."
                  echo "=============================================================================================="
                  ##Upload ert Tile
                  om-linux --target https://pcf.${ENV_NAME}.cf-app.com -k \
                          --username "${DEFAULT_OPSMAN_USERNAME}" \
                          --password "${DEFAULT_OPSMAN_PASSWORD}" \
                          upload-product \
                          --product pivnet-ert/cf*.pivotal
        params:
          ENV_NAME: *env_name
          DEFAULT_OPSMAN_USERNAME: *default_opsman_username
          DEFAULT_OPSMAN_PASSWORD: *default_opsman_password
      - task: stage-elastic-runtime-using-om
        tags: *worker_tag
        privileged: true
        config:
          platform: linux
          image: docker:///cftoolsmiths/deploy-pcf-vsphere-1.9
          inputs:
          - name: pivnet-ert
          run:
            path: /bin/bash
            args:
              - '-c'
              - |
                  set -e
                  cf_product_version=$(cd pivnet-ert; find . -name "cf-*.pivotal" | sed -e 's/^.\/cf-//' -e 's/.pivotal$//')
                  opsman_hostname="pcf.${ENV_NAME}.cf-app.com"
                  echo "=============================================================================================="
                  echo " Staging ERT tile (version ${cf_product_version}) to @ https://$opsman_hostname ..."
                  echo "=============================================================================================="
                  ##Get Uploaded Tile --product-version
                  ##Move 'available product to 'staged'
                  om-linux --target https://${opsman_hostname} -k \
                          --username "${DEFAULT_OPSMAN_USERNAME}" \
                          --password "${DEFAULT_OPSMAN_PASSWORD}" \
                          stage-product \
                          --product-name cf --product-version ${cf_product_version}
        params:
          ENV_NAME: *env_name
          DEFAULT_OPSMAN_USERNAME: *default_opsman_username
          DEFAULT_OPSMAN_PASSWORD: *default_opsman_password
      - task: upload-stemcell-for-ert
        tags: *worker_tag
        config:
          platform: linux
          image: docker:///cftoolsmiths/deploy-pcf-vsphere-1.9
          inputs:
          - name: pivnet-ert
          run:
            path: /bin/bash
            args:
            - -c
            - |
                set -e

                stemcell_version=$(unzip -c "pivnet-ert/cf-*.pivotal" metadata/cf.yml | grep -A3 stemcell | grep version | grep -oE "[0-9\.]+")
                echo "=============================================================================================="
                echo " Downloading stemcell version ${stemcell_version} ... "
                echo "=============================================================================================="
                stemcell_url="https://bosh.io/d/stemcells/bosh-vsphere-esxi-ubuntu-trusty-go_agent?v=${stemcell_version}"
                curl -L "$stemcell_url" -o "/tmp/bosh-stemcell-${stemcell_version}-vsphere-esxi-ubuntu-trusty-go_agent.tgz"
                echo
                echo "=============================================================================================="
                echo " Uploading stemcell version ${stemcell_version} ... "
                echo "=============================================================================================="
                om-linux --target https://pcf.${ENV_NAME}.cf-app.com -k \
                         --username "${DEFAULT_OPSMAN_USERNAME}" \
                         --password "${DEFAULT_OPSMAN_PASSWORD}" \
                         upload-stemcell \
                         -s "/tmp/bosh-stemcell-${stemcell_version}-vsphere-esxi-ubuntu-trusty-go_agent.tgz"
        params:
          ENV_NAME: *env_name
          DEFAULT_OPSMAN_USERNAME: *default_opsman_username
          DEFAULT_OPSMAN_PASSWORD: *default_opsman_password
      on_failure: *email-on-failure

  - name: configure-elastic-runtime
    serial: true
    plan:
    - aggregate:
      - get: toolsmiths-shared-scripts
        tags: *worker_tag
        passed: [upload-elastic-runtime-pcf-vsphere]
        trigger: true
    - do:
      - task: configure-elastic-runtime
        tags: *worker_tag
        privileged: true
        config:
          platform: linux
          image: docker:///cftoolsmiths/deploy-pcf-vsphere-1.9
          inputs:
          - name: toolsmiths-shared-scripts
          run:
            path: /bin/bash
            args:
            - '-c'
            - |
                set -e
                export DOMAIN="${ENV_NAME}.cf-app.com"
                cd toolsmiths-shared-scripts/deploy_pcf
                ./mk_ssl_cert_key.sh "$DOMAIN"
                export DOMAIN_CRT=$(cat ${DOMAIN}.crt)
                export DOMAIN_KEY=$(cat ${DOMAIN}.key)
                erb ert-config.json.erb > ert-config.json
                om-linux --target "https://pcf.${DOMAIN}" -k \
                        --username "${DEFAULT_OPSMAN_USERNAME}" \
                        --password "${DEFAULT_OPSMAN_PASSWORD}" \
                        configure-product \
                        --product-name cf \
                        -p "$(cat ./ert-config.json)"
        params:
          ENV_NAME: *env_name
          HAPROXY_IP: *haproxy_ip
          DEFAULT_OPSMAN_USERNAME: *default_opsman_username
          DEFAULT_OPSMAN_PASSWORD: *default_opsman_password
      on_failure: *email-on-failure

  - name: trigger-install
    serial: true
    plan:
    - aggregate:
      - get: toolsmiths-shared-scripts
        tags: *worker_tag
        passed: [configure-elastic-runtime]
        trigger: true
    - do:
      - task: apply-changes-using-om
        tags: *worker_tag
        config:
          platform: linux
          image: docker:///cftoolsmiths/deploy-pcf-vsphere-1.9
          run:
            path: /bin/bash
            args:
              - '-c'
              - |
                  set -e
                  echo "=============================================================================================="
                  echo " Applying changes to https://pcf.$ENV_NAME.cf-app.com ..."
                  echo "=============================================================================================="
                  tries=1
                  until [ $tries -ge 4 ]
                  do
                       om_status=0
                       echo "=============================================================================================="
                       echo "Attempt Number ${tries}: Apply-Changes ..."
                       echo "=============================================================================================="
                       om-linux --target https://pcf.${ENV_NAME}.cf-app.com -k \
                          --request-timeout 3600 \
                          --username "${DEFAULT_OPSMAN_USERNAME}" \
                          --password "${DEFAULT_OPSMAN_PASSWORD}" \
                          apply-changes \
                       && break
                       om_status=$?
                       tries=$[$tries+1]
                       sleep 60
                  done
                  exit $om_status
        params:
          ENV_NAME: *env_name
          DEFAULT_OPSMAN_USERNAME: *default_opsman_username
          DEFAULT_OPSMAN_PASSWORD: *default_opsman_password
      - task: email-on-success
        config:
          platform: linux
          image: docker:///blang/alpine-bash
          params:
            ENV_NAME: *env_name
            OPS_MANAGER_URL: *ops_manager_url
            CONTACT_EMAIL: *contact_email
          run:
            path: /bin/bash
            args:
            - '-c'
            - |
              echo -e "Successfully deployed PCF on $ENV_NAME" > $PWD/pipeline-output/subject-file
              echo -e "Hello $CONTACT_EMAIL,\n\nYour PCF deployment on $ENV_NAME succeeded. You can access your Ops Manager here: $OPS_MANAGER_URL.\n\nThanks,\n\nCF Toolsmiths Team" > $PWD/pipeline-output/body-file
          outputs:
          - name: pipeline-output
      - put: send-an-email
        params:
          subject: pipeline-output/subject-file
          body: pipeline-output/body-file
      on_failure: *email-on-failure
